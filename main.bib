@article{akao1994development,
	title={Development history of quality function deployment},
	author={Akao, Yoji},
	journal={The Customer Driven Approach to Quality Planning and Deployment},
	volume={339},
	pages={90},
	year={1994},
	publisher={Asian Productivity Organization Minato, Tokyo 107 Japan}
}

@InProceedings{10.1007/978-3-319-62217-0_9,
	author="Alfayez, Reem
	and Chen, Celia
	and Behnamghader, Pooyan
	and Srisopha, Kamonphop
	and Boehm, Barry",
	editor="Madni, Azad M.
	and Boehm, Barry
	and Ghanem, Roger G.
	and Erwin, Daniel
	and Wheaton, Marilee J.",
	title="An Empirical Study of Technical Debt in Open-Source Software Systems",
	booktitle="Disciplinary Convergence in Systems Engineering Research",
	year="2018",
	publisher="Springer International Publishing",
	address="Cham",
	pages="113--125",
	abstract="Technical debt (TD) is a term coined by agile software pioneer Ward Cunningham to account for the added software-system effort or cost resulting from taking early software project shortcuts. The debt metaphor reflects that debt accumulates interest: the later it is paid, the more it costs. The TD concept has achieved extensive visibility and usage in the software field, but it applies at least as strongly to cyber-physical systems. In researching the TD phenomena, we have found that open-source software projects are particularly good subjects, as they keep records of the timing, content, and rationale for each update. In this paper, we concentrate on the analysis of open-source software projects to evaluate the relationships between multiple software system characteristics and TD and the relationships between software process factors and TD.",
	isbn="978-3-319-62217-0"
}

@Article{Behnamghader2017,
	author="Behnamghader, Pooyan
	and Le, Duc Minh
	and Garcia, Joshua
	and Link, Daniel
	and Shahbazian, Arman
	and Medvidovic, Nenad",
	title="A large-scale study of architectural evolution in open-source software systems",
	journal="Empirical Software Engineering",
	year="2017",
	month="Jun",
	day="01",
	volume="22",
	number="3",
	pages="1146--1193",
	abstract="From its very inception, the study of software architecture has recognized architectural decay as a regularly occurring phenomenon in long-lived systems. Architectural decay is caused by repeated, sometimes careless changes to a system during its lifespan. Despite decay's prevalence, there is a relative dearth of empirical data regarding the nature of architectural changes that may lead to decay, and of developers' understanding of those changes. In this paper, we take a step toward addressing that scarcity by introducing an architecture recovery framework, ARCADE, for conducting large-scale replicable empirical studies of architectural change across different versions of a software system. ARCADE includes two novel architectural change metrics, which are the key to enabling large-scale empirical studies of architectural change. We utilize ARCADE to conduct an empirical study of changes found in software architectures spanning several hundred versions of 23 open-source systems. Our study reveals several new findings regarding the frequency of architectural changes in software systems, the common points of departure in a system's architecture during the system's maintenance and evolution, the difference between system-level and component-level architectural change, and the suitability of a system's implementation-level structure as a proxy for its architecture.",
	issn="1573-7616",
	doi="10.1007/s10664-016-9466-0",
	url="https://doi.org/10.1007/s10664-016-9466-0"
}


@article {IIS2:IIS2278,
	author = {Boehm, Barry and Chen, Celia and Srisopha, Kamonphop and Shi, Lin},
	title = {The Key Roles of Maintainability in an Ontology for System Qualities},
	journal = {INCOSE International Symposium},
	volume = {26},
	number = {1},
	issn = {2334-5837},
	url = {http://dx.doi.org/10.1002/j.2334-5837.2016.00278.x},
	doi = {10.1002/j.2334-5837.2016.00278.x},
	pages = {2026--2040},
	year = {2016},
}

@article {IIS2:IIS267,
	author = {Boehm, Barry and Kukreja, Nupul},
	title = {An Initial Ontology for System Qualities},
	journal = {INCOSE International Symposium},
	volume = {25},
	number = {1},
	issn = {2334-5837},
	url = {http://dx.doi.org/10.1002/j.2334-5837.2015.00067.x},
	doi = {10.1002/j.2334-5837.2015.00067.x},
	pages = {341--356},
	year = {2015},
}


@article {SYS:SYS20096,
	author = {Boehm, Barry and Valerdi, Ricardo and Honour, Eric},
	title = {The ROI of systems engineering: Some quantitative results for software-intensive systems},
	journal = {Systems Engineering},
	volume = {11},
	number = {3},
	publisher = {Wiley Subscription Services, Inc., A Wiley Company},
	issn = {1520-6858},
	url = {http://dx.doi.org/10.1002/sys.20096},
	doi = {10.1002/sys.20096},
	pages = {221--234},
	keywords = {return on investment, systems engineering measurement, COCOMO, COSYSMO, value of systems engineering, systems architecting},
	year = {2008},
}

@ARTICLE{7006384, 
	author={L. Chen}, 
	journal={IEEE Software}, 
	title={Continuous Delivery: Huge Benefits, but Challenges Too}, 
	year={2015}, 
	volume={32}, 
	number={2}, 
	pages={50-54}, 
	keywords={research and development;software development management;CD capability;Paddy Power;continuous delivery;release engineering;research agendas;valuable software;Companies;Context modeling;Continuous production;Pipelines;Software development;Software engineering;Testing;DevOps;continuous delivery;continuous software engineering;release engineering;software deployment;software engineering}, 
	doi={10.1109/MS.2015.27}, 
	ISSN={0740-7459}, 
	month={Mar},}

@article{cundiff2003manufacturing,
	title={Manufacturing readiness levels (MRL)},
	author={Cundiff, Dan},
	journal={Unpublished white paper},
	year={2003}
}


@INPROCEEDINGS{1008006, 
	author={A. Elssamadisy and G. Schalliol}, 
	booktitle={Proceedings of the 24th International Conference on Software Engineering. ICSE 2002}, 
	title={Recognizing and responding to "bad smells" in extreme programming}, 
	year={2002}, 
	volume={}, 
	number={}, 
	pages={617-622}, 
	keywords={project management;software engineering;software quality;Extreme Programming;XP;best practices;life cycle;poor practices;quality software;software development process;Asset management;Best practices;Books;Contracts;Life testing;Permission;Programming;Project management;Signal processing;Software quality}, 
	doi={10.1145/581417.581418}, 
	ISSN={}, 
	month={May},}

@misc{royce1998software,
	title={Software project management-a unified approach},
	author={Royce, Walker},
	year={1998},
	publisher={Addison-Wesley Longman}
}

@inproceedings{sauser2006trl,
	title={From TRL to SRL: The concept of systems readiness levels},
	author={Sauser, Brian and Verma, Dinesh and Ramirez-Marquez, Jose and Gove, Ryan},
	booktitle={Conference on Systems Engineering Research, Los Angeles, CA},
	pages={1--10},
	year={2006}
}

@misc{sauser2007system,
	title={System Maturity Metrics for Decision Support in Defense Acquisition Users Guide: Version 1.0},
	author={Sauser, Brian J},
	year={2007}
}

@inproceedings{medvidovic2010software,
	title={Software architecture: foundations, theory, and practice},
	author={Medvidovic, Nenad and Taylor, Richard N},
	booktitle={Software Engineering, 2010 ACM/IEEE 32nd International Conference on},
	volume={2},
	pages={471--472},
	year={2010},
	organization={IEEE}
}

@phdthesis{valerdi2005constructive,
	title={The constructive systems engineering cost model (COSYSMO)},
	author={Valerdi, Ricardo},
	year={2005},
	school={Citeseer}
}

@book{vitasek2013vested,
	title={Vested outsourcing: five rules that will transform outsourcing},
	author={Vitasek, Kate and Ledyard, Mike},
	year={2013},
	publisher={Springer}
}

@article{welker2001software,
	title={The software maintainability index revisited},
	author={Welker, Kurt D},
	journal={CrossTalk},
	volume={14},
	pages={18--21},
	year={2001}
}

@phdthesis{bernstein1998design,
	title={Design methods in the aerospace industry: looking for evidence of set-based practices},
	author={Bernstein, Joshua Ian},
	year={1998},
	school={Massachusetts Institute of Technology}
}

@book{reinertsten2009principles,
	title={The principles of product development flow: second generation lean product development},
	author={Reinertsten, Donald G},
	year={2009},
	publisher={Celeritas}
}

@inproceedings{abts2000cocots,
	title={COCOTS: A COTS software integration lifecycle cost model-model overview and preliminary data collection findings},
	author={Abts, Chris and Boehm, Barry W and Clark, Elizabeth Bailey},
	booktitle={ESCOM-SCOPE Conference},
	pages={18--20},
	year={2000},
	organization={Citeseer}
}

@article{bullock2000calculating,
	title={Calculating the Value of Testing From an executive's perspective, software testing is not a capital investment in the physical plant, an acquisition, or another readily accepted business expense. A Quality Assurance Manager describes how to present testing as a business-process investment},
	author={Bullock, James},
	journal={Software Testing and Quality Engineering},
	volume={2},
	pages={56--63},
	year={2000},
	publisher={SQE}
}

@book{li2012value,
	title={Value-based, dependency-aware inspection and test prioritization},
	author={Li, Qi},
	year={2012},
	publisher={University of Southern California}
}

@techreport{dodaro2015government,
	title={Government Efficiency and Effectiveness: Opportunities to Reduce Fragmentation, Overlap, and Duplication and Achieve Other Financial Benefits},
	author={Dodaro, Gene L},
	year={2015},
	institution={GOVERNMENT ACCOUNTABILITY OFFICE WASHINGTON DC}
}

@article{redman2008weapon,
	title={Weapon System Design Using Life Cycle Costs},
	author={Redman, Q},
	journal={Raytheon Presenatation},
	year={2008}
}

@article{koskinen2009software,
	title={Software maintenance fundamentals},
	author={Koskinen, Jussi},
	journal={Encyclopedia of Software Engineering, P. Laplante, Ed., Taylor \& Francis Group},
	year={2009}
}

@article{parnas1979designing,
	title={Designing software for ease of extension and contraction},
	author={Parnas, David Lorge},
	journal={IEEE transactions on software engineering},
	number={2},
	pages={128--138},
	year={1979},
	publisher={IEEE}
}

@article{boehm2008balancing,
	title={Balancing opportunities and risks in component-based software development},
	author={Boehm, Barry and Bhuta, Jesal},
	journal={IEEE software},
	volume={25},
	number={6},
	year={2008},
	publisher={IEEE}
}

@article{sundbo2000innovation,
	title={Innovation as a loosely coupled system in services},
	author={Sundbo, Jon and Gallouj, Fa{\"\i}z},
	journal={International Journal of Services Technology and Management},
	volume={1},
	number={1},
	pages={15--36},
	year={2000},
	publisher={Inderscience Publishers}
}

@article{borges2004delving,
	title={Delving into service-oriented architecture},
	author={Borges, Bernhard and Holley, Kerrie and Arsanjani, Ali},
	journal={http://www. developer. com/java/data/article. php/3409221/Delving-into-Service-Oriented-Architecture. htm>. Acessado},
	volume={1},
	number={07},
	pages={2012},
	year={2004}
}

@article{haffa2016learning,
	title={Learning from acquisition history},
	author={Haffa, Robert and Datla, Anand},
	journal={AEROSPACE AMERICA},
	volume={54},
	number={1},
	pages={30--33},
	year={2016},
	publisher={AMER INST AERONAUTICS ASTRONAUTICS 1801 ALEXANDER BELL DRIVE, STE 500, RESTON, VA 22091-4344 USA}
}

@incollection{chen2016evaluating,
	title={Evaluating Human-Assessed Software Maintainability Metrics},
	author={Chen, Celia and Alfayez, Reem and Srisopha, Kamonphop and Shi, Lin and Boehm, Barry},
	booktitle={Software Engineering and Methodology for Emerging Domains},
	pages={120--132},
	year={2016},
	publisher={Springer}
}

@article{dod2011technology,
	title={Technology readiness assessment (TRA) guidance},
	author={DoD, US},
	journal={Revision posted},
	volume={13},
	year={2011}
}

@book{boehm2000software,
	title={Software cost estimation with Cocomo II with Cdrom},
	author={Boehm, Barry W and Madachy, Ray and Steece, Bert and others},
	year={2000},
	publisher={Prentice Hall PTR}
}

@book{chacon2014pro,
	title={Pro git},
	author={Chacon, Scott and Straub, Ben},
	year={2014},
	publisher={Apress}
}

@article{hovemeyer2004finding,
	title={Finding bugs is easy},
	author={Hovemeyer, David and Pugh, William},
	journal={ACM Sigplan Notices},
	volume={39},
	number={12},
	pages={92--106},
	year={2004},
	publisher={ACM}
}


@article{bardas2010static,
	title={Static code analysis},
	author={Bardas, Alexandru G and others},
	journal={Journal of Information Systems and Operations Management},
	volume={4},
	number={2},
	pages={99--107},
	year={2010}
}

@inproceedings{le2015empirical,
	title={An empirical study of architectural change in open-source software systems},
	author={Le, Duc Minh and Behnamghader, Pooyan and Garcia, Joshua and Link, Daniel and Shahbazian, Arman and Medvidovic, Nenad},
	booktitle={Proceedings of the 12th Working Conference on Mining Software Repositories},
	pages={235--245},
	year={2015},
	organization={IEEE Press}
}

@article{Dyer2015TOSEM,
	author = {Dyer, Robert and Nguyen, Hoan Anh and Rajan, Hridesh and Nguyen, Tien N.},
	title = {Boa: Ultra-Large-Scale Software Repository and Source-Code Mining},
	journal = {ACM Trans. Softw. Eng. Methodol.},
	issue_date = {December 2015},
	volume = {25},
	number = {1},
	month = dec,
	year = {2015},
	issn = {1049-331X},
	pages = {7:1--7:34},
	articleno = {7},
	numpages = {34},
	url = {http://doi.acm.org/10.1145/2803171},
	doi = {10.1145/2803171},
	acmid = {2803171},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Boa, domain-specific language, ease of use, lower barrier to entry, mining software repositories, scalable},
} 

@article{lindvall1998well,
	title={How well do experienced software developers predict software change?},
	author={Lindvall, Mikael and Sandahl, Kristian},
	journal={Journal of Systems and Software},
	volume={43},
	number={1},
	pages={19--27},
	year={1998},
	publisher={Elsevier}
}

@inproceedings{nagappan2005static,
	title={Static analysis tools as early indicators of pre-release defect density},
	author={Nagappan, Nachiappan and Ball, Thomas},
	booktitle={Proceedings of the 27th international conference on Software engineering},
	pages={580--586},
	year={2005},
	organization={ACM}
}

@inproceedings{boehm2016key,
	title={The Key Roles of Maintainability in an Ontology for System Qualities},
	author={Boehm, Barry and Chen, Celia and Srisopha, Kamonphop and Shi, Lin},
	booktitle={INCOSE International Symposium},
	volume={26},
	number={1},
	pages={2026--2040},
	year={2016},
	organization={Wiley Online Library}
}

@inproceedings{boehm2015initial,
	title={An Initial Ontology for System Qualities},
	author={Boehm, Barry and Kukreja, Nupul},
	booktitle={INCOSE International Symposium},
	volume={25},
	number={1},
	pages={341--356},
	year={2015},
	organization={Wiley Online Library}
}
@article{campbellsonarqube,
	title={SonarQube: Open source quality management},
	author={Campbell, A},
	year={2015},
	journal={Website: tiny. cc/2q4z9x}
}
@article{bessey2010few,
	title={A few billion lines of code later: using static analysis to find bugs in the real world},
	author={Bessey, Al and Block, Ken and Chelf, Ben and Chou, Andy and Fulton, Bryan and Hallem, Seth and Henri-Gros, Charles and Kamsky, Asya and McPeak, Scott and Engler, Dawson},
	journal={Communications of the ACM},
	volume={53},
	number={2},
	pages={66--75},
	year={2010},
	publisher={ACM}
}

@article{ayewah2008using,
	title={Using static analysis to find bugs},
	author={Ayewah, Nathaniel and Hovemeyer, David and Morgenthaler, J David and Penix, John and Pugh, William},
	journal={IEEE software},
	volume={25},
	number={5},
	year={2008},
	publisher={IEEE}
}

@article{khalid2016examining,
	title={Examining the Relationship between FindBugs Warnings and App Ratings},
	author={Khalid, Hammad and Nagappan, Meiyappan and Hassan, Ahmed E},
	journal={IEEE Software},
	volume={33},
	number={4},
	pages={34--39},
	year={2016},
	publisher={IEEE}
}

@inproceedings{kupsch2009manual,
	title={Manual vs. automated vulnerability assessment: A case study},
	author={Kupsch, James A and Miller, Barton P},
	booktitle={First International Workshop on Managing Insider Security Threats (MIST)},
	pages={83--97},
	year={2009}
}

@inproceedings{wagner2005comparing,
	title={Comparing bug finding tools with reviews and tests},
	author={Wagner, Stefan and J{\"u}rjens, Jan and Koller, Claudia and Trischberger, Peter},
	booktitle={IFIP International Conference on Testing of Communicating Systems},
	pages={40--55},
	year={2005},
	organization={Springer}
}

@article{louridas2006static,
	title={Static code analysis},
	author={Louridas, Panagiotis},
	journal={IEEE Software},
	volume={23},
	number={4},
	pages={58--61},
	year={2006},
	publisher={IEEE}
}

@inproceedings{johnson2013don,
	title={Why don't software developers use static analysis tools to find bugs?},
	author={Johnson, Brittany and Song, Yoonki and Murphy-Hill, Emerson and Bowdidge, Robert},
	booktitle={Software Engineering (ICSE), 2013 35th International Conference on},
	pages={672--681},
	year={2013},
	organization={IEEE}
}

@inproceedings{palomba2014they,
	title={Do they really smell bad? a study on developers' perception of bad code smells},
	author={Palomba, Fabio and Bavota, Gabriele and Di Penta, Massimiliano and Oliveto, Rocco and De Lucia, Andrea},
	booktitle={Software maintenance and evolution (ICSME), 2014 IEEE international conference on},
	pages={101--110},
	year={2014},
	organization={IEEE}
}
@article{scholtes2016aristotle,
	title={From Aristotle to Ringelmann: a large-scale analysis of team productivity and coordination in Open Source Software projects},
	author={Scholtes, Ingo and Mavrodiev, Pavlin and Schweitzer, Frank},
	journal={Empirical Software Engineering},
	volume={21},
	number={2},
	pages={642--683},
	year={2016},
	publisher={Springer}
}
@inproceedings{oliveira2017collaborative,
	title={Collaborative identification of code smells: a multi-case study},
	author={Oliveira, Roberto and Sousa, Leonardo and de Mello, Rafael and Valentim, Natasha and Lopes, Adriana and Conte, Tayana and Garcia, Alessandro and Oliveira, Edson and Lucena, Carlos},
	booktitle={Proceedings of the 39th International Conference on Software Engineering: Software Engineering in Practice Track},
	pages={33--42},
	year={2017},
	organization={IEEE Press}
}
@inproceedings{vasilescu2015data,
	title={A data set for social diversity studies of GitHub teams},
	author={Vasilescu, Bogdan and Serebrenik, Alexander and Filkov, Vladimir},
	booktitle={Proceedings of the 12th Working Conference on Mining Software Repositories},
	pages={514--517},
	year={2015},
	organization={IEEE Press}
}
@inproceedings{dyer2013boa,
	title={Boa: A language and infrastructure for analyzing ultra-large-scale software repositories},
	author={Dyer, Robert and Nguyen, Hoan Anh and Rajan, Hridesh and Nguyen, Tien N},
	booktitle={Proceedings of the 2013 International Conference on Software Engineering},
	pages={422--431},
	year={2013},
	organization={IEEE Press}
}

@inproceedings{diamantopoulos2016qualboa,
	title={QualBoa: reusability-aware recommendations of source code components},
	author={Diamantopoulos, Themistoklis and Thomopoulos, Klearchos and Symeonidis, Andreas},
	booktitle={Proceedings of the 13th International Conference on Mining Software Repositories},
	pages={488--491},
	year={2016},
	organization={ACM}
}

@inproceedings{gousios2014lean,
	title={Lean GHTorrent: GitHub data on demand},
	author={Gousios, Georgios and Vasilescu, Bogdan and Serebrenik, Alexander and Zaidman, Andy},
	booktitle={Proceedings of the 11th Working Conference on Mining Software Repositories},
	pages={384--387},
	year={2014},
	organization={ACM}
}

@inproceedings{beller2016analyzing,
	title={Analyzing the state of static analysis: A large-scale evaluation in open source software},
	author={Beller, Moritz and Bholanath, Radjino and McIntosh, Shane and Zaidman, Andy},
	booktitle={Software Analysis, Evolution, and Reengineering (SANER), 2016 IEEE 23rd International Conference on},
	volume={1},
	pages={470--481},
	year={2016},
	organization={IEEE}
}

@article{mexim2015introduction,
	title={An introduction to modern software quality assurance},
	author={Mexim, B and Kessentini, Marouane},
	journal={Software quality assurance: in large scale and complex software-intensive systems. Morgan Kaufmann, Waltham},
	pages={19--46},
	year={2015}
}

@inproceedings{boehm1976quantitative,
	title={Quantitative evaluation of software quality},
	author={Boehm, Barry W and Brown, John R and Lipow, Mlity},
	booktitle={Proceedings of the 2nd international conference on Software engineering},
	pages={592--605},
	year={1976},
	organization={IEEE Computer Society Press}
}

@article{mockus2002two,
	title={Two case studies of open source software development: Apache and Mozilla},
	author={Mockus, Audris and Fielding, Roy T and Herbsleb, James D},
	journal={ACM Transactions on Software Engineering and Methodology (TOSEM)},
	volume={11},
	number={3},
	pages={309--346},
	year={2002},
	publisher={ACM}
}
@article{raymond1999cathedral,
	title={The cathedral and the bazaar},
	author={Raymond, Eric},
	journal={Knowledge, Technology \& Policy},
	volume={12},
	number={3},
	pages={23--49},
	year={1999},
	publisher={Springer}
}


@inproceedings{tu2000evolution,
	title={Evolution in open source software: A case study},
	author = {Godfrey, Michael W. and Tu, Qiang},
	booktitle={Software Maintenance, 2000. Proceedings. International Conference on},
	pages={131--142},
	year={2000},
	organization={IEEE}
}


@inproceedings{lee2017sealant,
	title={A SEALANT for inter-app security holes in android},
	author={Lee, Youn Kyu and Safi, Gholamreza and Shahbazian, Arman and Zhao, Yixue and Medvidovic, Nenad and others},
	booktitle={Proceedings of the 39th International Conference on Software Engineering},
	pages={312--323},
	year={2017},
	organization={IEEE Press}
}


@article{ganpati2012comparative,
	title={A Comparative Study of Maintainability Index of Open Source Software},
	author={Ganpati, Anita and Kalia, Arvind and Singh, Hardeep},
	journal={Int. J. Emerg. Technol. Adv. Eng},
	volume={2},
	number={10},
	pages={228--230},
	year={2012},
	publisher={Citeseer}
}

@incollection{d2008analysing,
	title={Analysing software repositories to understand software evolution},
	author={D'Ambros, Marco and Gall, Harald and Lanza, Michele and Pinzger, Martin},
	booktitle={Software evolution},
	pages={37--67},
	year={2008},
	publisher={Springer}
}

@inproceedings{safi2015detecting,
	title={Detecting event anomalies in event-based systems},
	author={Safi, Gholamreza and Shahbazian, Arman and Halfond, William GJ and Medvidovic, Nenad},
	booktitle={Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
	pages={25--37},
	year={2015},
	organization={ACM}
}

@inproceedings{mahajan2016using,
	title={Using visual symptoms for debugging presentation failures in web applications},
	author={Mahajan, Sonal and Li, Bailan and Behnamghader, Pooyan and Halfond, William GJ},
	booktitle={Software Testing, Verification and Validation (ICST), 2016 IEEE International Conference on},
	pages={191--201},
	year={2016},
	organization={IEEE}
}

@INPROCEEDINGS{7516827, 
	author={D. M. Le and C. Carrillo and R. Capilla and N. Medvidovic}, 
	booktitle={2016 13th Working IEEE/IFIP Conference on Software Architecture (WICSA)}, 
	title={Relating Architectural Decay and Sustainability of Software Systems}, 
	year={2016}, 
	pages={178-181}, 
	keywords={software architecture;software maintenance;software metrics;software quality;source code (software);architectural smells;code sustainability level;software evolution;software maintenance;software metrics;software system architectural decay;software system sustainability;system health;system quality;Computer architecture;Computer bugs;Maintenance engineering;Measurement;Software systems;Taxonomy;Sustainability;evolution;longevity;quality attributes;software architecture;software metrics}, 
	doi={10.1109/WICSA.2016.15}, 
	month={April},}

@INPROCEEDINGS{langhammer, 
	author={M. Langhammer and A. Shahbazian and N. Medvidovic and R. H. Reussner}, 
	booktitle={2016 13th Working IEEE/IFIP Conference on Software Architecture (WICSA)}, 
	title={Automated Extraction of Rich Software Models from Limited System Information}, 
	year={2016}, 
	pages={99-108}, 
	keywords={public domain software;software architecture;source code (software);limited system information;open source software systems;rich software model automated extraction;source code;system static architecture extraction;test cases;Analytical models;Calculators;Computer architecture;Phase change materials;Predictive models;Software;Unified modeling language}, 
	doi={10.1109/WICSA.2016.35}, 
	month={April},}

@inproceedings{Vallee-Rai:1999:SJB:781995.782008,
	author = {Vall{\'e}e-Rai, Raja and Co, Phong and Gagnon, Etienne and Hendren, Laurie and Lam, Patrick and Sundaresan, Vijay},
	title = {Soot - a Java Bytecode Optimization Framework},
	booktitle = {Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research},
	series = {CASCON '99},
	year = {1999},
	location = {Mississauga, Ontario, Canada},
	pages = {13--},
	url = {http://dl.acm.org/citation.cfm?id=781995.782008},
	acmid = {782008},
	publisher = {IBM Press},
}

@inproceedings{wen2004effectiveness,
	Author = {Wen, Zhihua and Tzerpos, Vassilios},
	Booktitle = {Program Comprehension, 2004. Proceedings. 12th IEEE International Workshop on},
	Organization = {IEEE},
	Pages = {194--203},
	Title = {An effectiveness measure for software clustering algorithms},
	Year = {2004}
}

@INPROCEEDINGS{Behnamghader2017qrs, 
	author={P. Behnamghader and R. Alfayez and K. Srisopha and B. Boehm}, 
	booktitle={2017 IEEE International Conference on Software Quality, Reliability and Security (QRS)}, 
	title={Towards Better Understanding of Software Quality Evolution through Commit-Impact Analysis}, 
	year={2017}, 
	volume={}, 
	number={}, 
	pages={251-262}, 
	keywords={program compilers;software metrics;software quality;source code (software);Apache Java software systems;commit-impact analysis;software quality indicator;software quality metrics;source code;Computer bugs;Measurement;Security;Software quality;Software systems;Tools;commit-impact analysis;mining software repositories;software quality evolution}, 
	doi={10.1109/QRS.2017.36}, 
	ISSN={}, 
	month={July},}

@INPROCEEDINGS{Alfayez2017stc, 
	author={R. Alfayez and P. Behnamghader and K. Srisopha and B. Boehm}, 
	booktitle={2017 IEEE 28th Annual Software Technology Conference (STC)}, 
	title={How does contributors involvement influence open source systems}, 
	year={2017}, 
	volume={}, 
	number={}, 
	pages={1-8}, 
	keywords={Computer bugs;Java;Open source software;Security;Software systems;Tools}, 
	doi={10.1109/STC.2017.8234462}, 
	ISSN={}, 
	month={Sept},}

@INPROCEEDINGS{srisopha2018cibse, 
	author={K. Srisopha and P.Behnamghader and B.Boehm}, 
	booktitle={CIbSE 2018, submitted}, 
	title={Do users talk about the software in my product?
	Analyzing user reviews on IoT products}, 
	year={2018}, 
	volume={}, 
	number={}, }

@book{Beizer:1995:BTT:202699,
	author = {Beizer, Boris},
	title = {Black-box Testing: Techniques for Functional Testing of Software and Systems},
	year = {1995},
	isbn = {0-471-12094-4},
	publisher = {John Wiley \& Sons, Inc.},
	address = {New York, NY, USA},
} 


@ARTICLE{Malaiya2002ieee, 
	author={Y. K. Malaiya and M. N. Li and J. M. Bieman and R. Karcich}, 
	journal={IEEE Transactions on Reliability}, 
	title={Software reliability growth with test coverage}, 
	year={2002}, 
	volume={51}, 
	number={4}, 
	pages={420-426}, 
	keywords={probability;program testing;software reliability;automatic test generation;blocks;branches;computation-uses;defect-coverage;high reliability;logarithmic-exponential model;manual test generation;predicate-uses;probabilities;program data-sets;software reliability growth;software test-coverage measures;software testing;testing effort;testing time;time to next failure prediction;Automatic testing;Computer science;Computerized monitoring;Knee;NASA;Predictive models;Software reliability;Software testing;Space technology;Sun}, 
	doi={10.1109/TR.2002.804489}, 
	ISSN={0018-9529}, 
	month={Dec},}

@article{PINTO201559,
	title = "A large-scale study on the usage of Java's concurrent programming constructs",
	journal = "Journal of Systems and Software",
	volume = "106",
	pages = "59 - 81",
	year = "2015",
	issn = "0164-1212",
	doi = "https://doi.org/10.1016/j.jss.2015.04.064",
	url = "http://www.sciencedirect.com/science/article/pii/S0164121215000849",
	author = "Gustavo Pinto and Weslley Torres and Benito Fernandes and Fernando Castor and Roberto S.M. Barros",
	keywords = "Java, Concurrency, Software evolution"
}

@INPROCEEDINGS{Tiwari2017msr, 
	author={N. M. Tiwari and G. Upadhyaya and H. A. Nguyen and H. Rajan}, 
	booktitle={2017 IEEE/ACM 14th International Conference on Mining Software Repositories (MSR)}, 
	title={Candoia: A Platform for Building and Sharing Mining Software Repositories Tools as Apps}, 
	year={2017}, 
	volume={}, 
	number={}, 
	pages={53-63}, 
	keywords={program debugging;project management;software tools;Candoia app;MSR tools;app customizability;apps sharing;appstore;data abstractions;data extraction tools;mining software repositories tools;programming practices;project management;software bugs;software evolution;software project settings;source code;Buildings;Computer bugs;Data mining;Ecosystems;Java;Software;Tools;Candioa ecosystem;Candoia;Candoia exchange;MSR;MSR apps;MSR data}, 
	doi={10.1109/MSR.2017.56}, 
	ISSN={}, 
	month={May},}

@INPROCEEDINGS{Rozenberg2016MSR, 
	author={D. Rozenberg and I. Beschastnikh and F. Kosmale and V. Poser and H. Becker and M. Palyart and G. C. Murphy}, 
	booktitle={2016 IEEE/ACM 13th Working Conference on Mining Software Repositories (MSR)}, 
	title={Comparing Repositories Visually with RepoGrams}, 
	year={2016}, 
	volume={}, 
	number={}, 
	pages={109-120}, 
	keywords={data visualisation;project management;public domain software;software management;software metrics;RepoGrams;extensible metrics-based visualization model;open source software projects;software engineering research;software metrics;Adaptation models;Analytical models;Color;Measurement;Servers;Software;Visualization;Evaluation target selection;Software evolution;Software visualization}, 
	doi={10.1109/MSR.2016.020}, 
	ISSN={}, 
	month={May},}

@article{BAJRACHARYA2014241,
	title = "Sourcerer: An infrastructure for large-scale collection and analysis of open-source code",
	journal = "Science of Computer Programming",
	volume = "79",
	pages = "241 - 259",
	year = "2014",
	note = "Experimental Software and Toolkits (EST 4): A special issue of the Workshop on Academic Software Development Tools and Techniques (WASDeTT-3 2010)",
	issn = "0167-6423",
	doi = "https://doi.org/10.1016/j.scico.2012.04.008",
	url = "http://www.sciencedirect.com/science/article/pii/S016764231200072X",
	author = "Sushil Bajracharya and Joel Ossher and Cristina Lopes",
	keywords = "Open source, Internet-scale code retrieval, Data mining, Sourcerer, Static analysis, Software information retrieval"
}

@INPROCEEDINGS{AlexandruSANER2017, 
	author={C. V. Alexandru and S. Panichella and H. C. Gall}, 
	booktitle={2017 IEEE 24th International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
	title={Reducing redundancies in multi-revision code analysis}, 
	year={2017}, 
	volume={}, 
	number={}, 
	pages={148-159}, 
	keywords={program diagnostics;software development management;software metrics;software tools;LISA;basic code metrics;code analysis tools;internal code representation;multilanguage code analysis;multirevision code analysis;programming ecosystem;programming languages;redundancy reduction;resources requirements;software engineering research;software projects;Computer languages;Ecosystems;Measurement;Metadata;Programming;Redundancy;Software}, 
	doi={10.1109/SANER.2017.7884617}, 
	ISSN={}, 
	month={Feb},}

@INPROCEEDINGS{Xavier2017SANER, 
	author={L. Xavier and A. Brito and A. Hora and M. T. Valente}, 
	booktitle={2017 IEEE 24th International Conference on Software Analysis, Evolution and Reengineering (SANER)}, 
	title={Historical and impact analysis of API breaking changes: A large-scale study}, 
	year={2017}, 
	volume={}, 
	number={}, 
	pages={138-147}, 
	keywords={application program interfaces;software libraries;software maintenance;API breaking changes;client developers;compilation errors;large-scale analysis;maintenance tasks;real-world Java libraries;software development;support library;Contracts;Java;Libraries;Maintenance engineering;Software;Time-frequency analysis;API Stability;API Usage;Backwards Compatibility;Software Evolution}, 
	doi={10.1109/SANER.2017.7884616}, 
	ISSN={}, 
	month={Feb},}

@INPROCEEDINGS{Upadhyaya2017NIER, 
	author={G. Upadhyaya and H. Rajan}, 
	booktitle={2017 IEEE/ACM 39th International Conference on Software Engineering: New Ideas and Emerging Technologies Results Track (ICSE-NIER)}, 
	title={On Accelerating Ultra-Large-Scale Mining}, 
	year={2017}, 
	volume={}, 
	number={}, 
	pages={39-42}, 
	keywords={data mining;parallel processing;pattern clustering;software engineering;artifact clustering;parallelization;software engineering;ultra large scale mining;Acceleration;Cloning;Data mining;Semantics;Software;Software engineering;Syntactics;Acceleration;Analysis;Big Code;Boa;Clustering}, 
	doi={10.1109/ICSE-NIER.2017.11}, 
	ISSN={}, 
	month={May},}

@Inbook{Kaur2018,
	author="Kaur, Arvinder
	and Chopra, Deepti",
	title="GCC-Git Change Classifier for Extraction and Classification of Changes in Software Systems",
	bookTitle="Intelligent Communication and Computational Technologies: Proceedings of Internet of Things for Technological Development, IoT4TD 2017",
	year="2018",
	publisher="Springer Singapore",
	address="Singapore",
	pages="259--267",
	abstract="Software repositories are used for many purposes like version control, source code management, bug and issue tracking and change log management. GitHub is one of the popular software repositories. GitHub contains commit history of software that lists all changes recorded in the software system, but it does not classify the changes according to the reason for change. In this study a mechanism for extraction and classification of changes is proposed and Git Change Classifier (GCC) tool is developed. The tool uses regular expression to extract changes and employs Text Mining to determine the type of change. GCC Tool reports the year-wise number of changes for a file and classifies the changes into three types: (a) Bug Repairing Changes (BRC), (b) Feature Introducing Changes (FIC) and (c) General Changes (GC). This classification is useful for predicting the effort required for new changes, tracking the resolution of bugs in software and understanding the evolution of the software as it may depend on the type of change.",
	isbn="978-981-10-5523-2",
	doi="10.1007/978-981-10-5523-2_24",
	url="https://doi.org/10.1007/978-981-10-5523-2_24"
}

@INPROCEEDINGS{Sokol2013SCAM, 
	author={F. Z. Sokol and M. F. Aniche and M. A. Gerosa}, 
	booktitle={2013 IEEE 13th International Working Conference on Source Code Analysis and Manipulation (SCAM)}, 
	title={MetricMiner: Supporting researchers in mining software repositories}, 
	year={2013}, 
	volume={}, 
	number={}, 
	pages={142-146}, 
	keywords={Internet;data mining;software metrics;MSR techniques;MetricMiner;Web application;complex infrastructure;computational resources;data analysis;data extraction;disk space;metrics calculation;mining software repository techniques;processing time;software engineering;source code;statistical inference;version control system metadata;Complexity theory;Conferences;Data mining;Data visualization;Databases;Measurement;Software;code metrics;mining software repositories;supporting tool}, 
	doi={10.1109/SCAM.2013.6648195}, 
	ISSN={}, 
	month={Sept},}

@ARTICLE{Tufano2017TSE, 
	author={M. Tufano and F. Palomba and G. Bavota and R. Oliveto and M. D. Penta and A. De Lucia and D. Poshyvanyk}, 
	journal={IEEE Transactions on Software Engineering}, 
	title={When and Why Your Code Starts to Smell Bad (and Whether the Smells Go Away)}, 
	year={2017}, 
	volume={43}, 
	number={11}, 
	pages={1063-1088}, 
	keywords={data mining;public domain software;software maintenance;software quality;source code (software);code comprehensibility;code maintainability;code quality;code smells;commits mining;open source projects;smell instances;smell-introducing commits;technical debt;Androids;Ecosystems;History;Humanoid robots;Maintenance engineering;Software systems;Code smells;empirical study;mining software repositories}, 
	doi={10.1109/TSE.2017.2653105}, 
	ISSN={0098-5589}, 
	month={Nov},}

@inproceedings{Tufano2015ICSE,
	author = {Tufano, Michele and Palomba, Fabio and Bavota, Gabriele and Oliveto, Rocco and Di Penta, Massimiliano and De Lucia, Andrea and Poshyvanyk, Denys},
	title = {When and Why Your Code Starts to Smell Bad},
	booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 1},
	series = {ICSE '15},
	year = {2015},
	isbn = {978-1-4799-1934-5},
	location = {Florence, Italy},
	pages = {403--414},
	numpages = {12},
	url = {http://dl.acm.org/citation.cfm?id=2818754.2818805},
	acmid = {2818805},
	publisher = {IEEE Press},
	address = {Piscataway, NJ, USA},
}

@INPROCEEDINGS{Garcia2011ASE, 
	author={J. Garcia and D. Popescu and C. Mattmann and N. Medvidovic and Yuanfang Cai}, 
	booktitle={2011 26th IEEE/ACM International Conference on Automated Software Engineering (ASE 2011)}, 
	title={Enhancing architectural recovery using concerns}, 
	year={2011}, 
	volume={}, 
	number={}, 
	pages={552-555}, 
	keywords={learning (artificial intelligence);software architecture;system recovery;architectural recovery enhancement;machine learning based technique;software systems;Computer architecture;Libraries;Meteorology;Sockets;Software;Supervised learning}, 
	doi={10.1109/ASE.2011.6100123}, 
	ISSN={1938-4300}, 
	month={Nov},}

@inproceedings{Tzerpos:2000:AAC:832307.837118,
	author = {Tzerpos, Vassilios and Holt, R. C.},
	title = {ACDC: An Algorithm for Comprehension-Driven Clustering},
	booktitle = {Proceedings of the Seventh Working Conference on Reverse Engineering (WCRE'00)},
	series = {WCRE '00},
	year = {2000},
	isbn = {0-7695-0881-2},
	pages = {258--},
	url = {http://dl.acm.org/citation.cfm?id=832307.837118},
	acmid = {837118},
	publisher = {IEEE Computer Society},
	address = {Washington, DC, USA},
} 

@misc{wheeler2001more,
	title={More than a gigabuck: Estimating GNU/Linux's size},
	author={Wheeler, David A}
}

@inproceedings{garcia2013obtaining,
	Author = {Garcia, Joshua and Krka, Ivo and Mattmann, Chris and Medvidovic, Nenad},
	Booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
	Organization = {IEEE Press},
	Pages = {901--910},
	Title = {Obtaining ground-truth software architectures},
	Year = {2013}}

@inproceedings{garcia2013comparative,
	Author = {Garcia, Joshua and Ivkovic, Igor and Medvidovic, Nenad},
	Booktitle = {Automated Software Engineering (ASE), 2013 IEEE/ACM 28th International Conference on},
	Organization = {IEEE},
	Pages = {486--496},
	Title = {A comparative analysis of software architecture recovery techniques},
	Year = {2013}}

@Article{Trautsch2017,
	author="Trautsch, Fabian
	and Herbold, Steffen
	and Makedonski, Philip
	and Grabowski, Jens",
	title="Addressing problems with replicability and validity of repository mining studies through a smart data platform",
	journal="Empirical Software Engineering",
	year="2017",
	month="Aug",
	day="08",
	abstract="The usage of empirical methods has grown common in software engineering. This trend spawned hundreds of publications, whose results are helping to understand and improve the software development process. Due to the data-driven nature of this venue of investigation, we identified several problems within the current state-of-the-art that pose a threat to the replicability and validity of approaches. The heavy re-use of data sets in many studies may invalidate the results in case problems with the data itself are identified. Moreover, for many studies data and/or the implementations are not available, which hinders a replication of the results and, thereby, decreases the comparability between studies. Furthermore, many studies use small data sets, which comprise of less than 10 projects. This poses a threat especially to the external validity of these studies. Even if all information about the studies is available, the diversity of the used tooling can make their replication even then very hard. Within this paper, we discuss a potential solution to these problems through a cloud-based platform that integrates data collection and analytics. We created SmartSHARK, which implements our approach. Using SmartSHARK, we collected data from several projects and created different analytic examples. Within this article, we present SmartSHARK and discuss our experiences regarding the use of it and the mentioned problems. Additionally, we show how we have addressed the issues that we have identified during our work with SmartSHARK.",
	issn="1573-7616",
	doi="10.1007/s10664-017-9537-x",
	url="https://doi.org/10.1007/s10664-017-9537-x"
}

@inproceedings{Trautsch:2016:APE:2901739.2901753,
	author = {Trautsch, Fabian and Herbold, Steffen and Makedonski, Philip and Grabowski, Jens},
	title = {Adressing Problems with External Validity of Repository Mining Studies Through a Smart Data Platform},
	booktitle = {Proceedings of the 13th International Conference on Mining Software Repositories},
	series = {MSR '16},
	year = {2016},
	isbn = {978-1-4503-4186-8},
	location = {Austin, Texas},
	pages = {97--108},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/2901739.2901753},
	doi = {10.1145/2901739.2901753},
	acmid = {2901753},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {smart data, software analytics, software mining},
} 

@ARTICLE{6336722, 
	author={P. Kruchten and R. L. Nord and I. Ozkaya}, 
	journal={IEEE Software}, 
	title={Technical Debt: From Metaphor to Theory and Practice}, 
	year={2012}, 
	volume={29}, 
	number={6}, 
	pages={18-21}, 
	keywords={Investments;Risk management;Software maintenance;Software quality;Sofware testing;evolvability;maintainability;refactoring;software quality;technical debt}, 
	doi={10.1109/MS.2012.167}, 
	ISSN={0740-7459}, 
	month={Nov},}

@inproceedings{ferenc2014source,
	title={Source meter sonar qube plug-in},
	author={Ferenc, Rudolf and Lang{\'o}, L{\'a}szl{\'o} and Siket, Istv{\'a}n and Gyim{\'o}thy, Tibor and Bakota, Tibor},
	booktitle={Source Code Analysis and Manipulation (SCAM), 2014 IEEE 14th International Working Conference on},
	pages={77--82},
	year={2014},
	organization={IEEE}
}

@ARTICLE{4602670, 
	author={N. Ayewah and D. Hovemeyer and J. D. Morgenthaler and J. Penix and W. Pugh}, 
	journal={IEEE Software}, 
	title={Using Static Analysis to Find Bugs}, 
	year={2008}, 
	volume={25}, 
	number={5}, 
	pages={22-29}, 
	keywords={Java;SQL;public domain software;security of data;software engineering;FindBugs;Java;SQL injection;open source static-analysis tool;runtime errors;security violations;software development;Computer bugs;Educational institutions;Java;Open source software;Production;Programming;Security;Software quality;Software tools;Testing;FindBugs;bug patterns;code quality;software defects;software quality;static analysis}, 
	doi={10.1109/MS.2008.130}, 
	ISSN={0740-7459}, 
	month={Sept},}

@INPROCEEDINGS{Hassan2017ESEM, 
	author={F. Hassan and X. Wang}, 
	booktitle={2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)}, 
	title={Change-Aware Build Prediction Model for Stall Avoidance in Continuous Integration}, 
	year={2017}, 
	volume={}, 
	number={}, 
	pages={157-162}, 
	keywords={data mining;program testing;software development management;software metrics;CI servers;Continuous Integration(CI);build latency time;build pipeline;central repository;change-aware build prediction model;code change submission;code modification;continuous submission;cross-project prediction scenario;integration testing;stall avoidance;unit testing;widely used development practice;Buildings;Data models;Entropy;Feature extraction;Java;Predictive models;Software;Continuous Integration;Software Build Outcome Prediction}, 
	doi={10.1109/ESEM.2017.23}, 
	ISSN={}, 
	month={Nov},}

@inproceedings{Seo:2014:PBE:2568225.2568255,
	author = {Seo, Hyunmin and Sadowski, Caitlin and Elbaum, Sebastian and Aftandilian, Edward and Bowdidge, Robert},
	title = {Programmers' Build Errors: A Case Study (at Google)},
	booktitle = {Proceedings of the 36th International Conference on Software Engineering},
	series = {ICSE 2014},
	year = {2014},
	isbn = {978-1-4503-2756-5},
	location = {Hyderabad, India},
	pages = {724--734},
	numpages = {11},
	url = {http://doi.acm.org/10.1145/2568225.2568255},
	doi = {10.1145/2568225.2568255},
	acmid = {2568255},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Software builds, build errors, empirical analysis},
} 

@article {SMR:SMR1838,
	author = {Tufano, Michele and Palomba, Fabio and Bavota, Gabriele and Di Penta, Massimiliano and Oliveto, Rocco and De Lucia, Andrea and Poshyvanyk, Denys},
	title = {There and back again: Can you compile that snapshot?},
	journal = {Journal of Software: Evolution and Process},
	volume = {29},
	number = {4},
	publisher = {John Wiley & Sons, Ltd},
	issn = {2047-7481},
	url = {http://dx.doi.org/10.1002/smr.1838},
	doi = {10.1002/smr.1838},
	pages = {e1838--n/a},
	keywords = {broken snapshots, empirical studies, mining software repositories, software quality},
	year = {2017},
	note = {e1838 smr.1838},
}

@inproceedings{Sulir:2016:QSJ:3001878.3001882,
	author = {Sul\'{\i}r, Mat\'{u}\v{s} and Porub\"{a}n, Jaroslav},
	title = {A Quantitative Study of Java Software Buildability},
	booktitle = {Proceedings of the 7th International Workshop on Evaluation and Usability of Programming Languages and Tools},
	series = {PLATEAU 2016},
	year = {2016},
	isbn = {978-1-4503-4638-2},
	location = {Amsterdam, Netherlands},
	pages = {17--25},
	numpages = {9},
	url = {http://doi.acm.org/10.1145/3001878.3001882},
	doi = {10.1145/3001878.3001882},
	acmid = {3001882},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {Ant, Build systems, Gradle, Maven, error logs},
} 

@INPROCEEDINGS{8170083, 
	author={F. Hassan and S. Mostafa and E. S. L. Lam and X. Wang}, 
	booktitle={2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)}, 
	title={Automatic Building of Java Projects in Software Repositories: A Study on Feasibility and Challenges}, 
	year={2017}, 
	volume={}, 
	number={}, 
	pages={38-47}, 
	keywords={Java;data mining;program diagnostics;project management;software development management;software engineering;software maintenance;200 Java projects;57% build failures;automatic building;automatic software building;data mining;detailed build failure taxonomy;large-scale advanced program analysis;software artifacts;software build tools;software engineering researchers;software repositories;Androids;Buildings;Humanoid robots;Java;Software;Software engineering;Tools}, 
	doi={10.1109/ESEM.2017.11}, 
	ISSN={}, 
	month={Nov},}

@Article{McIntosh2015,
	author="McIntosh, Shane
	and Nagappan, Meiyappan
	and Adams, Bram
	and Mockus, Audris
	and Hassan, Ahmed E.",
	title="A Large-Scale Empirical Study of the Relationship between Build Technology and Build Maintenance",
	journal="Empirical Software Engineering",
	year="2015",
	month="Dec",
	day="01",
	volume="20",
	number="6",
	pages="1587--1633",
	abstract="Build systems specify how source code is translated into deliverables. They require continual maintenance as the system they build evolves. This build maintenance can become so burdensome that projects switch build technologies, potentially having to rewrite thousands of lines of build code. We aim to understand the prevalence of different build technologies and the relationship between build technology and build maintenance by analyzing version histories in a corpus of 177,039 repositories spread across four software forges, three software ecosystems, and four large-scale projects. We study low-level, abstraction-based, and framework-driven build technologies, as well as tools that automatically manage external dependencies. We find that modern, framework-driven build technologies need to be maintained more often and these build changes are more tightly coupled with the source code than low-level or abstraction-based ones. However, build technology migrations tend to coincide with a shift of build maintenance work to a build-focused team, deferring the cost of build maintenance to them.",
	issn="1573-7616",
	doi="10.1007/s10664-014-9324-x",
	url="https://doi.org/10.1007/s10664-014-9324-x"
}

@inproceedings{Abts00cocots:a,
	author = {Chris Abts and Barry W. Boehm and Elizabeth Bailey Clark},
	title = {COCOTS: a COTS software integration cost model - model overview and preliminary data findings},
	booktitle = {Proceedings ESCOM-SCOPE 2000 Conference},
	year = {2000},
	pages = {325--333}
}

@inproceedings{Gligoric:2014:AMB:2660193.2660239,
	author = {Gligoric, Milos and Schulte, Wolfram and Prasad, Chandra and van Velzen, Danny and Narasamdya, Iman and Livshits, Benjamin},
	title = {Automated Migration of Build Scripts Using Dynamic Analysis and Search-based Refactoring},
	booktitle = {Proceedings of the 2014 ACM International Conference on Object Oriented Programming Systems Languages \& Applications},
	series = {OOPSLA '14},
	year = {2014},
	isbn = {978-1-4503-2585-1},
	location = {Portland, Oregon, USA},
	pages = {599--616},
	numpages = {18},
	url = {http://doi.acm.org/10.1145/2660193.2660239},
	doi = {10.1145/2660193.2660239},
	acmid = {2660239},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {build system, migration, search-based refactoring},
} 


@INPROCEEDINGS{cser2018behnamghader,
	AUTHOR="Pooyan Behnamghader and Barry Boehm",
	TITLE="Towards Better Understanding of Software Maintainability Evolution",
	BOOKTITLE="2018 Conference on Systems Engineering Research (CSER 2018)",
	ADDRESS="Charlottesville, USA",
	DAYS=8,
	MONTH=may,
	YEAR=2018,
	KEYWORDS="Software Evolution; Software Maintainability",
	ABSTRACT="Due to effort and scalability challenges involved in understanding software
	maintainability evolution, and conflicts and synergies among software
	quality attributes on a large-scale, researchers are forced to adjust the
	scope which oftentimes results in skipping the code or applying lightweight
	static analysis techniques over commit history. To address this scarcity,
	we developed SQUAAD, a comprehensive framework including a cloud-based
	automated infrastructure accompanied by a data analytics and visualization
	tool-set. SQUAAD has been documented in multiple recent research
	publications empowering their empirical studies and is used by a major
	governmental entity."
}

@inproceedings{Alfayez2018TechDebt,
	title={An Exploratory Study on the Influence of Developers in
	Technical Debt},
	author={Reem Alfayez and Pooyan Behnamghader and Kamonphop Srisopha and Barry Boehm},
	booktitle={Proceedings of the International Conference on
	Technical Debt},
	year={2018}
}

@INPROCEEDINGS{Behnamghader2018esem,
	AUTHOR="Pooyan Behnamghader and Patavee Meemeng and Iordanis Fostiropolous and Di Huang and Kamonphop Srisopha and Barry Boehm",
	TITLE="Towards Enabling a More Complete Byte-Code Analysis over Commit-History",
	BOOKTITLE="Proceedings of the 12th International Symposium on Empirical Software Engineering and Measurement",
	YEAR=2018
}

@book{glass1997software,
	title={Software runaways: monumental software disasters},
	author={Glass, Robert L},
	year={1997},
	publisher={Prentice Hall Englewood Cliffs, NJ}
}

@book{leffingwell2007scaling,
	title={Scaling software agility: best practices for large enterprises},
	author={Leffingwell, Dean},
	year={2007},
	publisher={Pearson Education}
}

@book{anderson2010kanban,
	title={Kanban: successful evolutionary change for your technology business},
	author={Anderson, David J},
	year={2010},
	publisher={Blue Hole Press}
}

@book{davis2016effective,
	title={Effective DevOps: building a culture of collaboration, affinity, and tooling at scale},
	author={Davis, Jennifer and Daniels, Ryn},
	year={2016},
	publisher={" O'Reilly Media, Inc."}
}

@book{bosch2017speed,
	title={Speed, data, and ecosystems: Excelling in a software-driven world},
	author={Bosch, Jan},
	year={2017},
	publisher={CRC Press}
}

@techreport{DefenseScienceBoard,
     title = {Design and Acquisition of Software for Defense Systems},
     author = {Defense Science Board, Department of Defense},
     year = {2018},
     month = {02},
     url = {https://apps.dtic.mil/dtic/tr/fulltext/u2/1048883.pdf},
     institution={Under Secretary of Defense for Research and Engineering (USD(R\&E))}
}

@article{incose2015systems,
  title={Systems engineering handbook: A guide for system life cycle processes and activities},
  author={INCOSE, David D Walden},
  journal={Fourth Edition},
  year={2015},
  publisher={John Wiley \& Sons Hoboken NJ}
}

@article{haimes2012systems,
  title={Systems-based guiding principles for risk modeling, planning, assessment, management, and communication},
  author={Haimes, Yacov Y},
  journal={Risk Analysis: An International Journal},
  volume={32},
  number={9},
  pages={1451--1467},
  year={2012},
  publisher={Wiley Online Library}
}

@techreport{ISOICETR247481,
     title = {ISO/IEC TR 24748-1: Systems and Software Engineering--Life Cycle Management--Part 1: Guide for Life Cycle Management},
     author = {Software \& Systems Engineering Standards Committee, IEEE Computer Society},
     year = {2011},
     url = {https://standards.ieee.org/standard/24748-1-2011.html},
     institution={ISO}
}